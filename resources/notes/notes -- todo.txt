:project transit-dart
   :author Mike Weaver
   :created 2023-03-11

:section Instructions

   Use this ✓ to mark completed

:section ToDo

   [] Do some initial testing on msgpack.

   [] Support verboseJson and MessagePack.

   [] With MessagePack I have to be able to ensure MapEntry order. The
   recommended library is msgpack_dart and I've asked the maintainer if he will
   entertain a PR that would add MapBuilder and ArrayBuilder capability

   [] `Time` will need to be different for msgpack and verbose.

   [] `Uuid` is also different for msgpack.

:section Done

   [✓] Support custom write handlers. -- Actually think the support already
   exists, but there isn't an API to get them inserted into the
   WriteHandlersMap. Do some hack-it-together testing to make sure.

   [✓] Support custom read handlers. -- Same thing as above, need an API to
   register them.

   [✓] Ugh. The JsonEncoder only encodes one object and then closes its stream.
   Why? Is it worth it to create our own JsonCombiner class that handles
   multiple objects coming through?

   [✓] The CacheDecoder's `convert` method is passed a Parser as option arg. But
   why? Why does it need access to a full-blown parser. Let's pass a closure
   instead.

   [✓] What API will be exposed/exported in the library? Probably a
   reader/writer pair that operates on streams, and then callers of the library
   can deal with connecting those streams back and forth into strings or
   whatever.

   [✓] The JsonParser constructor needs to allow for override of mapBuilder and
   listBuilder. Then same overrides will be allowed in TransitDecoder.json. And
   maybe we don't need to have the cache be set-able.

   [✓] How about the JsonSplitter converts from strings to JsonObjects? In other
   words, we don't add a string to the sink, we add json.decode(str) to the
   sink. Then we don't have to worry about the fact that JsonDecoder is a
   one-shot converter. UPDATE: to do this, we can't use the
   StringConversionSink, which is expecting a string, not a JSON object.

   [✓] Modify the JsonSplitter to not freak out about extra characters between
   JSON forms. Strictly speaking, we would never encounter that in production,
   but for testing, it is handy to be able to hit returns between JSON arrays,
   or pipe in a file that has "readable" JSON data. We could even set a
   `strictMode` toggle if we really want to be purists and turn it off in
   production.

   [✓] Is it possible to join/transform with JsonDecoder after the JsonSplitter?
   If not, then we have to listen for each event from the JsonSplitter and then
   decode. UPDATE: not possible. the JsonDecoder is a one-shot converter.

   [✓] Build some tests where we convert all the way to JSON and confirm against
   the transit samples. Figure out how to integrate the testing that is part of
   transit-format.

   [✓] Double check this in Java version, but I think the emitter and parser
   should clear the cache on each call for each top-level object. UPDATE: yes,
   but it is done in the Read- and WriteFactory's inside the Reader and Writer
   objects they return. So my private `_reset` functions will need to be exposed
   as `init` methods that can be called.

   [✓] Need to roundtrip verbose time '~t'. Maybe I just don't provide a reader
   for it in json and it roundtrips as is with no changes. (And also make sure
   the error I'm seeing with running transit-format/bin/verify is not from an
   inconsistent java version or something.) Can also just create a wrapper value
   for it and store timestamp as a string instead of a DateTime object
   (otherwise, I would parse it and re-emit it as '~m' instead of '~t').

   [✓] Need to correctly round-trip uri's that include exotic unicode
   characters, for example "~rhttp://www.詹姆斯.com/". Dart is escaping this to
   "http://www.%E8%A9%B9%E5%A7%86%E6%96%AF.com/". Maybe best approach is to
   create our own Uri value that depends only on strings, not the Dart Uri
   class.

   [✓] Need to deal with decimals that have exponential notation, for example,
   things like "~f-1.1E-1". Dart is not picking up the 'E-1' part and treating
   it like `1.1`. There is a `big_decimal` package that claims to be based on
   Java's BigDecimal. We just need something that can correctly handle
   exponential notation. Maybe whatever we choose, we still wrap it in our own
   BigDecimal class, so that if we need to change dependencies later, we only
   change things in our wrapper class, and the rest of transit-dart still works
   okay. This gives us the choice of making the local rep a class, a string,
   whatever.

   [✓] Need to handle empty strings: "".

   [✓] BUG: `null` as a quoted value does not parse.

   [✓] Add == operator and hashCode on wrapper classes, if nothing else, at
   least to support testing.

   [✓] Read-handlers.

   [✓] Implement Keyword and Symbol and the rest of the scalar extension types.
   How will those eventually play with cljd?
