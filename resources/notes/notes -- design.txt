:project transit-dart
   :author Mike Weaver
   :created 2023-02-26

:section Introduction

   Ultimate goal is to have transit in place in ClojureDart, to make it dead
   simple for passing data between back-end and front-end. Could go right to
   transit-cljd, but an underlying transit-dart library makes it available to a
   wider audience outside of Clojure, and then the ClojureDart can live as a
   layer on top of that.

:section Legacy project

   There is an {existing project} that was last updated over nine years ago,
   which I think was before Dart 2. Could, but I'm not going to, try to build on
   top of that, but there are so many compiler warnings just opening the
   project. Not sure that I care to gain a lot of first-hand knowledge about the
   differences between ancient and current Dart, which I predict would be the
   main outcome of such an approach.

   :link existing project
      https://github.com/cleandart/transit-dart

   That project (sort of?) follows along with the java implementation, although
   as far as I can tell without actually compiling it and running test, there
   appear to be some gaps in the implementation. It does use Dart's `Converter`s
   and `Codec`s, which I like.

   I opened an issue on that project asking if they have plans to bring it up to
   date with Dart 2, and barring that or any objections on their side, I'm going
   to call this one transit-dart and basically plan on, in a manner as kindly as
   possible, seperseding that old library.

:section Architecture

   Going to build this in three layers. The first is a codec for translating
   between Dart objects and transit semantic values. Semantic values are
   represented with class `TaggedValue` which pairs a Dart object with a transit
   tag. Collections are recursively transformed so that their elements and keys
   are also `TaggedValue`s.

   The next layer moves from `TaggedValue` to `FormattedValue` wich converts
   the Dart object and tag into transit-formatted, json-friendly values. This
   conversion layer is where we deal with escaping of strings.

   The next layer deals with caching. It requires traversing a graph of objects
   and replacing map keys (and keywords and symbols and ~#tag). Been pondering
   if that is less efficient, since the java implementation does the caching at
   the same moment that it is emitting the tagged value. This would also be very
   dirty mutation, since planning on caching values 'in situ'.

   The next layer don't have to build, just utilize the Dart-provided json
   Codec.

   UPDATE: (2023-03-11) The above is still my plan, but found it easier to deal
   with stuff by adhering pretty closely to the java implentation. Still
   thinking about the above and may eventually convert to that approach, but
   first want to get it working.

:section Streams

   The java implementation is built around readers and writers and streams,
   whereas this approach is more focused on transforming (single) objects with
   Codecs. And for many (most?) applications marshalling a single object in and
   out of transit might be enough. But to be fully compatible with transit, add
   a final layer that reads and writes from streams.

   Some more ideas about streams.

   For MessagePack I found and adapted a stream implementation. It exposes a
   StreamTransformer class and internally, in the `bind` method it manually
   generates a stream with a bunch of async/await calls. This is actually nice
   because it lets you reconstruct a recursive structure with yield statements.
   The one drawback is as a StreamTransformer, I don't have a `convert` method.

   I think I could just add a `convert` method which would be able to deal with
   synchronous conversions, but turn it all over to the same mechanisms that
   underly the asynchronous `bind` with something like this:

   ```
      Future<dynamic> convert(UInt8List input) async {
         return await _decode(ChunkedStreamReader(Stream.value(input)));
      }

   Not sure adding Future<> to all the method signatures infects all my code.
   Will it work?

   If this works out, I might go back and change the JsonRepeatDecoder back into
   a StreamTransformer, and then just also give it a convert method for cases
   when a single value needs to be converted.

:section Following java

   Maybe more closely follow the java implementation, basing around Read- and
   WriteHandlers. These would be classes that don't really hold state, but just
   know how to spit back a tag and a rep, where rep is a converted object.

   :section WriteHandlers

      These are not objects per se, they are justs converters. They don't hold
      any state on their own. A WriteHandler's contract is "you give me an
      object of the type that I like, and I'll give you back something that can
      be emitted to JSON". Then the emitter is similar, in that it holds no
      state, but it can take a written object and spit out JSON (or, in our
      case, JSON-friendly values). So a writer converts any object to
      transit-friendly, and the emitter converts to JSON-friendly.

      Have not implemented a WriteHandler for `char` because no such object
      exists in Dart. But will need a ReadHandler.

:section Common mistakes

   Always forgetting to put `return`.

   Have to be careful with `null`, because it can be a valid transit value, but
   may also signify 'nothing'.

:section Questions about transit

   Why do java and clj implementations of transit say they are version 1.0 and
   they match the spec, but the spec itself says version 0.8 (which is also what
   js and cljs denote).

   Why does transit clear the entire cache when it reaches the max of 44*44? Why
   doesn't it just overwrite the cache at index 0, and so on incrementally as it
   encounters new cacheable values?
